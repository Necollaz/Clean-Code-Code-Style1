using System.Text;
using System.Data;

public interface IPassportCheckerView
{
    public string PassportText { get; }
    public void SetResultText(string text);
    public void ShowMessage(string message);
}

public interface IHasher
{
    string ComputeSha256Hash(string rawData);
}

public class Hasher : IHasher
{
    public string ComputeSha256Hash(string rawData)
    {
        using (var sha256 = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(rawData));
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}

public class Citizen
{
    public Citizen(bool hasAcces)
    {
        HasAccess = hasAcces;
    }

    public bool HasAccess { get; private set; }
}

public class Passport
{
    public Passport(string passportEntry, int minPassportLenght)
    {
        if (string.IsNullOrEmpty(passportEntry))
            throw new ArgumentException("Введите серию и номер паспорта.");

        string trimmedEntry = passportEntry.Trim();
        string rawData = trimmedEntry.Replace(" ", string.Empty);

        if (rawData.Length < minPassportLenght)
            throw new ArgumentException("Неверный формат серии или номера паспорта.");

        RawData = rawData;
    }

    public string RawData { get; private set; }
}

public class DataReader
{
    private readonly DataTableProvider _dataTableProvider;

    public DataReader(DataTableProvider dataTableProvider)
    {
        _dataTableProvider = dataTableProvider ?? throw new ArgumentNullException(nameof(dataTableProvider));
    }

    public Citizen? ReadAccess(string hash)
    {
        if (string.IsNullOrEmpty(hash))
            throw new ArgumentException(nameof(hash));

        string commandText = $"select * from passports where num='{hash}' limit 1;";

        DataTable dataTable = _dataTableProvider.GetData(commandText);

        if (dataTable.Rows.Count > 0)
            return new Citizen(Convert.ToBoolean(dataTable.Rows[0].ItemArray[1]));

        return null;
    }
}

public class DataTableProvider
{
    private readonly string _connectionString;

    public DataTableProvider(string connectionString)
    {
        if (string.IsNullOrEmpty(connectionString))
            throw new ArgumentException(nameof(connectionString));

        _connectionString = connectionString;
    }

    public DataTable GetData(string commandText)
    {
        DataTable dataTable = new DataTable();

        using (SQLiteConnection connection = new SQLiteConnection(_connectionString))
        {
            connection.Open();

            using (SQLiteDataAdapter sqLiteDataAdapter = new SQLiteDataAdapter(new SQLiteCommand(commandText, connection)))
            {
                sqLiteDataAdapter.Fill(dataTable);
            }
        }

        return dataTable;
    }
}

public class PassportPresenterFactory
{
    private readonly string _connectionString;

    public PassportPresenterFactory(string connectionString)
    {
        if (string.IsNullOrEmpty(connectionString))
            throw new ArgumentException(nameof(connectionString));

        _connectionString = connectionString;
    }

    public PassportCheckerPresenter Create(IPassportCheckerView passportView)
    {
        DataTableProvider dataTableProvider = new DataTableProvider(_connectionString);
        DataReader dataReader = new DataReader(dataTableProvider);
        Hasher hasher = new Hasher();
        PassportCheckerModel model = new PassportCheckerModel(dataReader, hasher);

        return new PassportCheckerPresenter(passportView, model);
    }
}

public class PassportCheckerView : IPassportCheckerView
{
    private readonly PassportCheckerPresenter _presenter;

    public PassportCheckerView(PassportPresenterFactory passportPresenterFactory)
    {
        _presenter = passportPresenterFactory.Create(this);
    }

    public string PassportText => PassportTextbox.text;

    public void SetResultText(string text)
    {
        textResult.Text = text;
    }

    public void ShowMessage(string message)
    {
        MessageBox.Show(message);
    }

    private void checkButton_Click(object sender, EventArgs e)
    {
        _presenter.OnCheckButtonClicked(PassportText);
    }
}

public class PassportCheckerModel
{
    private readonly DataReader _dataReader;
    private readonly IHasher _hasher;

    public PassportCheckerModel(DataReader dataReader, IHasher hasher)
    {
        _dataReader = dataReader ?? throw new ArgumentNullException(nameof(dataReader));
        _hasher = hasher ?? throw new ArgumentNullException(nameof(hasher));
    }

    public Citizen? Check(string rawData)
    {
        if (string.IsNullOrEmpty(rawData))
            throw new ArgumentException(nameof(rawData));

        string hashedData = _hasher.ComputeSha256Hash(rawData);

        return _dataReader.ReadAccess(hashedData);
    }
}

public class PassportCheckerPresenter
{
    private PassportCheckerModel _model;
    private IPassportCheckerView _view;
    private readonly int _minimumPassportLength = 10;

    public PassportCheckerPresenter(IPassportCheckerView view, PassportCheckerModel model)
    {
        _model = model ?? throw new ArgumentNullException(nameof(model));
        _view = view ?? throw new ArgumentNullException(nameof(view));
    }

    public void OnCheckButtonClicked(string passportEntry)
    {
        try
        {
            Passport passport = new Passport(passportEntry, _minimumPassportLength);
            Citizen? citizen = _model.Check(passport.RawData);

            _view.SetResultText(citizen?.HasAccess switch
            {
                true => $"По паспорту «{passport.RawData}» доступ к бюллетеню на дистанционном электронном голосовании ПРЕДОСТАВЛЕН",
                false => $"По паспорту «{passport.RawData}» доступ к бюллетеню на дистанционном электронном голосовании НЕ ПРЕДОСТАВЛЯЛСЯ",
                null => $"Паспорт «{passport.RawData}» в списке участников дистанционного голосования НЕ НАЙДЕН"
            });
        }
        catch (ArgumentException exception)
        {
            _view.ShowMessage(exception.Message);
        }
        catch (SQLiteException)
        {
            _view.ShowMessage("Файл db.sqlite не найден. Положите файл в папку вместе с exe.");
        }
    }
}
