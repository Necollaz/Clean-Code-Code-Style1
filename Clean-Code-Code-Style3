public interface IPassportCheckerView
{
    public string PassportText { get; }
    public string ResultText { set; }
    public void ShowMessage(string message);
}

public class PassportCheckerModel
{
    private readonly string _connectionString;

    public PassportCheckerModel(string connectionString)
    {
        if(string.IsNullOrWhiteSpace(connectionString))
            throw new ArgumentNullException(nameof(connectionString));

        _connectionString = connectionString;
    }

    public string Check(string rawData)
    {
        string commandText = $"select * from passports where num='{Form1.ComputeSha256Hash(rawData)}' limit 1;";

        using (SQLiteConnection connection = new SQLiteConnection(_connectionString))
        {
            connection.Open();

            using (SQLiteDataAdapter sqLiteDataAdapter = new SQLiteDataAdapter(new SQLiteCommand(commandText, connection)))
            {
                DataTable dataTable1 = new DataTable();

                sqLiteDataAdapter.Fill(dataTable1);

                if (dataTable1.Rows.Count > 0)
                {
                    bool hasAccess = Convert.ToBoolean(dataTable1.Rows[0].ItemArray[1]);

                    return hasAccess ? $"По паспорту «{rawData}» доступ к бюллетеню на дистанционном электронном голосовании ПРЕДОСТАВЛЕН" :
                        $"По паспорту «{rawData}» доступ к бюллетеню на дистанционном электронном голосовании НЕ ПРЕДОСТАВЛЯЛСЯ";
                }
                else
                {
                    return $"Паспорт «{rawData}» в списке участников дистанционного голосования НЕ НАЙДЕН";
                }
            }
        }
    }

    public string ComputeSha256Hash(string rawData)
    {
        using(var sha256 = System.Security.Cryptography.SHA256.Create())
        {
            byte[] bytes = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
            StringBuilder builder = new StringBuilder();

            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }

            return builder.ToString();
        }
    }
}

public class PassportCheckerPresenter
{
    private PassportCheckerModel _model;
    private IPassportCheckerView _view;
    private readonly int _minimumPassportLength = 10;

    public PassportCheckerPresenter(IPassportCheckerView view, PassportCheckerModel model)
    {
        _model = model ?? throw new ArgumentNullException(nameof(model));
        _view = view ?? throw new ArgumentNullException(nameof(view));
    }

    public void OnCheckButtonClicked()
    {
        string passportEntry = _view.PassportText.Trim();
        string rawData = passportEntry.Replace(" ", string.Empty);

        if (string.IsNullOrEmpty(passportEntry))
        {
            _view.ShowMessage("Введите серию и номер паспорта.");
            return;
        }

        if(rawData.Length < _minimumPassportLength)
        {
            _view.ResultText = "Неверный формат серии или номера паспорта.";
            return;
        }

        try
        {
            _view.ResultText = _model.Check(rawData);
        }
        catch (SQLiteException)
        {
            _view.ShowMessage("Файл db.sqlite не найден. Положите файл в папку вместе с exe.");
        }
    }
}

public class PassportForm : IPassportCheckerView
{
    private PassportCheckerPresenter _presenter;

    public PassportForm()
    {
        string connectionString = $"Data Source={Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)}\\db.sqlite";
        PassportCheckerModel model = new PassportCheckerModel(connectionString);
        _presenter = new PassportCheckerPresenter(this, model);
    }

    public string PassportText => PassportTextbox.text;

    public string ResultText { set => textResult.Text = value; }

    public void ShowMessage(string message)
    {
        MessageBox.Show(message);
    }

    private void checkButton_Click(object sender, EventArgs e)
    {
        _presenter.OnCheckButtonClicked();
    }
}
